<!-- 视频通话 -->
<template>
	<view class="content">
		<view class="video-box">
			<view class="myVideo">
				<rtcsdk-video-view class="video-ui" :usrVideoId="{ userId: userInfo.userId }" />
				<view class="video-text">
					<text class="text">{{userInfo.nickname}}</text>
				</view>
			</view>
			<view class="videoList">
				<view class="video" v-for="item in openCamList" :key="item.userId">
					<rtcsdk-video-view class="video-ui" :usrVideoId="{ userId: item.userId }" />
					<view class="video-text">
						<text class="text">{{item.nickName}}</text>
					</view>
				</view>
			</view>
		</view>
		<view class="btn-box">
			<button class="btn primary" @click="toggleCamDevices">
				<text class="btn-text">{{curFrontCam ? '后置摄像头':'前置摄像头'}}</text>
			</button>
			<button class="btn primary" @click="toggleCamState">
				<text class="btn-text">{{curCamState ? '关闭摄像头':'打开摄像头'}}</text>
			</button>
			<button class="btn primary" @click="toggleMicState">
				<text class="btn-text">{{curMicState ? '关闭麦克风':'打开麦克风'}}</text>
			</button>
			<button class="btn primary" @click="toggleEarDevices">
				<text class="btn-text">{{speakerOut ? '切换为听筒':'切换为扬声器'}}</text>
			</button>
		</view>
	</view>
</template>

<script>
	import mixin from './mixin'
	import { RtcsdkVideoView } from '@/RTCSDK/component';
	export default {
		mixins: [mixin],
		components: {
			RtcsdkVideoView
		},
		data() {
			return {
				curFrontCam: true, //当前使用前置摄像头
				curCamState: true, //摄像头开启状态
				curMicState: true, //麦克风开启状态
				speakerOut: true, //扬声器输出
				memberList: [],
			};
		},
		computed: {
			//打开了摄像头的成员列表
			openCamList() {
				const openCamList = this.memberList.filter(item => item.userId !== this.userInfo.userId && item.videoStatus === 3);
				if (openCamList.length > 9) {
					openCamList.length = 9;
				}
				return openCamList;
			}
		},
		onLoad() {
			this.memberList = this.RTCSDK.getAllMembers();

			//获取前后置摄像头
			const devicePosition = this.RTCSDK.getMyVideoPosition();
			//将前置摄像头设置为默认摄像头
			this.RTCSDK.setDefaultVideo(this.userInfo.userId, devicePosition.front);
		},
		mounted() {
			if (this.curCamState) {
				this.RTCSDK.openVideo(this.userInfo.userId);
			}
			if (this.curMicState) {
				this.RTCSDK.openMic(this.userInfo.userId);
			}
		},
		methods: {
			//mixins调用到此方法
			handleEventsPage(bool) {
				const handle = this.RTCSDK[bool ? 'on' : 'off'];
				handle("userLeftMeeting", this._userLeftMeeting);
				handle("userEnterMeeting", this._userEnterMeeting);
				handle("videoStatusChanged", this._videoStatusChanged);
				handle("audioStatusChanged", this._audioStatusChanged);
			},
			//切换前后摄像头
			toggleCamDevices() {
				const devicePosition = this.RTCSDK.getMyVideoPosition();
				this.curFrontCam = !this.curFrontCam;
				this.RTCSDK.setDefaultVideo(this.userInfo.userId, devicePosition[this.curFrontCam ? 'front' : 'back']);
			},
			//开关摄像头
			toggleCamState() {
				this.curCamState = !this.curCamState;
				if (this.curCamState) {
					this.RTCSDK.openVideo(this.userInfo.userId);
				} else {
					this.RTCSDK.closeVideo(this.userInfo.userId);
				}
			},
			//开关麦克风
			toggleMicState() {
				this.curMicState = !this.curMicState;
				if (this.curMicState) {
					this.RTCSDK.openMic(this.userInfo.userId);
				} else {
					this.RTCSDK.closeMic(this.userInfo.userId);
				}
			},
			//切换听筒或扬声器
			toggleEarDevices() {
				this.speakerOut = !this.speakerOut;
				this.RTCSDK.setSpeakerOut(this.speakerOut);
			},
			_userEnterMeeting({ userID }) {
				const memberInfo = this.RTCSDK.getMemberInfo(userID);
				this.memberList.push(memberInfo);
			},
			_userLeftMeeting({ userID }) {
				const idx = this.memberList.findIndex(item => item.userId === userID);
				if (idx > -1) {
					this.memberList.splice(idx, 1);
				}
			},
			_videoStatusChanged({ userID, newStatus }) {
				if (userID == this.userInfo.userId) {
					//进入到这里可能是别人改变了自己的摄像头开关
					this.curCamState = newStatus === 3;
				} else {
					const idx = this.memberList.findIndex(item => item.userId === userID);
					if (idx > -1) {
						this.memberList[idx].videoStatus = newStatus;
					}
				}
			},
			_audioStatusChanged({ userID, newStatus }) {
				if (userID == this.userInfo.userId) {
					//进入到这里可能是别人改变了自己的麦克风开关
					this.curMicState = newStatus === 3;
				}
			}
		}
	}
</script>

<style lang="scss">
	.content {
		flex: 1;

		.video-box {
			flex: 1;
			background-color: #1d232f;
			position: relative;

			.myVideo {
				width: 750rpx;
				flex: 1;
				position: relative;

				.video-ui {
					width: 750rpx;
					flex: 1;
				}

				.video-text {
					position: absolute;
					top: 20rpx;
					left: 20rpx;
					background-color: rgba(0, 0, 0, .6);
					padding: 4rpx 10rpx;
					border-radius: 10rpx;

					.text {
						font-size: 24rpx;
						color: #fff;
					}
				}
			}

			.videoList {
				position: absolute;
				right: 0;
				top: 10rpx;
				right: 5rpx;
				display: flex;
				flex-wrap: wrap-reverse;
				flex-direction: column;
				width: 492rpx;
				height: 830rpx;

				.video {
					width: 144rpx;
					height: 256rpx;
					background-color: #000;
					margin-bottom: 20rpx;
					margin-left: 20rpx;
					position: relative;

					.video-ui {
						width: 144rpx;
						height: 256rpx;
					}

					.video-text {
						position: absolute;
						top: 10rpx;
						left: 10rpx;
						background-color: rgba(0, 0, 0, .6);
						padding: 4rpx 10rpx;
						border-radius: 10rpx;

						.text {
							font-size: 12rpx;
							color: #fff;
						}
					}
				}
			}
		}

		.btn-box {
			padding: 20rpx 0 0;
			display: flex;
			flex-direction: row;
			justify-content: space-around;
			flex-wrap: wrap;
			background-color: #070604;

			.btn {
				width: 340rpx;
				margin-bottom: 20rpx;
			}
		}
	}
</style>