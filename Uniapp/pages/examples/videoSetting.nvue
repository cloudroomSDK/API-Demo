<!-- 视频通话 -->
<template>
	<view class="content">
		<view class="video-box">
			<rtcsdk-videoView class="myVideo" ref="myVideo"></rtcsdk-videoView>
			<view class="videoList">
				<rtcsdk-videoView v-for="item in openCamList" class="video" :ref="item.userId" :key="item.userId">
				</rtcsdk-videoView>
			</view>
		</view>
		<view class="bottom">
			<view class="resolution-ratio">
				<text class="text">分辨率</text>
				<view class="btn-group">
					<button class="btn plain" :class="{primary:index==curSizeIdx}" v-for="(str,index) in ['360P','480P','720P','1080P']" :key="index" @click="swittchResolutionRatio(index)">
						<text class="btn-text">{{str}}</text>
					</button>
				</view>
			</view>
			<view class="slider-box">
				<text class="text">码率</text>
				<slider class="slider" :value="videoCfg.maxbps" @change="setVideoCfg" @changing="codeSliderChanging" step="10000" min="0" :max="codeMaxRate" />
				<text class="value">{{videoCfg.maxbps / 1000}} kbps</text>
			</view>
			<view class="slider-box">
				<text class="text">帧率</text>
				<slider class="slider" :value="videoCfg.fps" min="5" max="30" @change="setVideoCfg" @changing="frameSliderChanging" />
				<text class="value">{{videoCfg.fps}} fps</text>
			</view>
			<view class="exit">
				<button class="btn danger" @click="exit">
					<text class="btn-text">退出</text>
				</button>
			</view>
		</view>
	</view>
</template>

<script>
	const sizeArr = [
		//高，宽，最大码率
		[640, 360, 420], //360p
		[848, 480, 780], //480p
		[1280, 720, 1200], //720p
		[1920, 1080, 2400], //1080p
	]
	export default {
		data() {
			return {
				userInfo: null,
				RTCSDK: null,
				curCamId: 1, //当前摄像头，1: 前置。 2:后置
				speakerOut: true, //扬声器输出
				curSizeIdx: 0,
				codeMaxRate: 420000,
				videoCfg: {
					fps: 24,
					size: {
						height: sizeArr[0][1],
						width: sizeArr[0][0]
					},
					maxbps: sizeArr[0][2] * 1000,
				},
				memberList: [],
			};
		},
		computed: {
			//打开了摄像头的成员列表
			openCamList() {
				const openCamList = this.memberList.filter(item => item.userId !== this.userInfo.userId && item.videoStatus === 3);
				if (openCamList.length > 9) {
					openCamList.length = 9;
				}
				return openCamList;
			}
		},
		onLoad({ roomId }) {
			uni.setNavigationBarTitle({
				title: `房间号：${roomId}`
			});
			this.RTCSDK = getApp().globalData.RTCSDK.getInstance();
			this.userInfo = getApp().globalData.userInfo;
			this.handleEvents();
			this.memberList = this.RTCSDK.getAllMembers();
			this.AllVideoInfo = this.RTCSDK.getAllVideoInfo(this.userInfo.userId);

			this.setVideoCfg();

			this.RTCSDK.setDefaultVideo(this.userInfo.userId, this.curCamId);
			this.RTCSDK.openVideo(this.userInfo.userId);
			this.RTCSDK.openMic(this.userInfo.userId);
		},
		mounted() {
			this.$refs.myVideo.setUsrVideoId({
				userId: this.userInfo.userId,
				videoID: -1
			})
			this.openCamList.forEach((item) => {
				this.$refs[item.userId][0].setUsrVideoId({
					userId: item.userId,
					videoID: -1
				});
			})
		},
		destroyed() {
			this.handleEvents(false);
			this.RTCSDK.exitMeeting();
		},
		methods: {
			handleEvents(bool = true) {
				const handle = this.RTCSDK[bool ? 'on' : 'off'];
				handle("userLeftMeeting", this._userLeftMeeting);
				handle("userEnterMeeting", this._userEnterMeeting);
				handle("videoStatusChanged", this._videoStatusChanged);
			},
			exit() {
				uni.navigateBack();
			},
			//切换了分辨率
			swittchResolutionRatio(idx) {
				const size = sizeArr[idx];
				const cfg = {
					...this.videoCfg,
					size: {
						width: size[0],
						height: size[1],
					},
					maxbps: size[2] * 1000
				}
				this.codeMaxRate = size[2] * 1000;
				this.videoCfg = cfg;
				this.curSizeIdx = idx;
				this.setVideoCfg();
			},
			setVideoCfg() {
				this.RTCSDK.setVideoCfg(this.videoCfg);
			},
			//帧率拖动
			frameSliderChanging(e) {
				this.videoCfg.fps = e.detail.value;
			},
			//码率拖动
			codeSliderChanging(e) {
				this.videoCfg.maxbps = e.detail.value;
			},
			_userEnterMeeting({ userID }) {
				const memberInfo = this.RTCSDK.getMemberInfo(userID);
				this.memberList.push(memberInfo);
			},
			_userLeftMeeting({ userID }) {
				const idx = this.memberList.findIndex(item => item.userId === userID);
				if (idx > -1) {
					this.memberList.splice(idx, 1);
				}
			},
			_videoStatusChanged({ userID, newStatus }) {
				if (userID !== this.userInfo.userId) {
					const idx = this.memberList.findIndex(item => item.userId === userID);
					if (idx > -1) {
						this.memberList[idx].videoStatus = newStatus;
					}
					if (newStatus === 3) {
						this.$nextTick(() => {
							this.$refs[userID][0].setUsrVideoId({
								userId: userID,
								videoID: -1
							})
						})
					}
				}
			}
		}
	}
</script>

<style lang="scss">
	.content {
		flex: 1;

		.video-box {
			flex: 1;
			background-color: #1d232f;
			position: relative;

			.myVideo {
				width: 750rpx;
				flex: 1;
			}

			.videoList {
				position: absolute;
				right: 0;
				top: 10rpx;
				right: 5rpx;
				display: flex;
				flex-wrap: wrap-reverse;
				flex-direction: column;
				width: 492rpx;
				height: 830rpx;

				.video {
					width: 144rpx;
					height: 256rpx;
					background-color: #000;
					margin-bottom: 20rpx;
					margin-left: 20rpx;
				}
			}
		}

		.bottom {
			position: absolute;
			bottom: 0;
			width: 750rpx;
			padding: 50rpx;
			display: flex;
			background-color: rgba(0, 0, 0, .8);

			.resolution-ratio {
				margin-bottom: 50rpx;

				.text {
					color: $uni-bg-color;
					margin-bottom: 30rpx;
					font-size: 28rpx;
				}

				.btn-group {
					flex-direction: row;
					justify-content: space-between;

					.btn {
						width: 140rpx;
						height: 60rpx;

						.btn-text {
							font-size: 28rpx;
						}
					}
				}
			}

			.exit {
				margin-top: 30rpx;

				.btn {
					width: 200rpx;
					height: 60rpx;

					.btn-text {
						font-size: 28rpx;
					}
				}
			}

			.slider-box {
				flex-direction: row;
				align-items: center;
				width: 750rpx;
				justify-content: space-between;
				margin-bottom: 30rpx;

				.text {
					color: $uni-bg-color;
					font-size: 28rpx;
					// width: 200rpx;
				}

				.slider {
					// width: 100rpx;
				}

				.value {
					margin-left: 20rpx;
					width: 200rpx;
					font-size: 28rpx;
					color: $uni-bg-color;
				}
			}

			.exit {
				align-items: center;

				.btn {
					width: 200rpx;
				}
			}
		}
	}
</style>