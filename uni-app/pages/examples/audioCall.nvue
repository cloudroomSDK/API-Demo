<!-- 视频通话 -->
<template>
	<view class="content">
		<view class="main">
			<view class="image">
				<image src="@/static/audio.png" mode="aspectFit" />
			</view>
			<view class="audio-value">
				<view class="item">
					<view><text class="text">{{userInfo.nickname}}</text></view>
					<view class="progress">
						<view class="value" :style="{width: 330 / 10 * myEnergyValue + 'rpx'}"></view>
					</view>
				</view>
				<view class="item" v-if="remoteUserId">
					<view><text class="text">{{remoteUserId}}</text></view>
					<view class="progress">
						<view class="value" :style="{width: 330 / 10 * remoteEnergyValue + 'rpx'}"></view>
					</view>
				</view>
			</view>
		</view>
		<view class="btn-box">
			<button class="btn primary" @click="toggleMicState">
				<text class="btn-text">{{curMicState ? '关闭麦克风':'打开麦克风'}}</text>
			</button>
			<button class="btn primary" @click="toggleEarDevices">
				<text class="btn-text">{{speakerOut ? '切换为听筒':'切换为扬声器'}}</text>
			</button>
			<button class="btn danger" @click="exit">
				<text class="btn-text">挂断</text>
			</button>
		</view>
	</view>
</template>

<script>
	import mixin from './mixin'
	export default {
		mixins: [mixin],
		data() {
			return {
				curMicState: true, //麦克风开启状态
				speakerOut: true, //扬声器输出
				myEnergyValue: 0,
				remoteUserId: '',
				remoteEnergyValue: 0,
			};
		},
		mounted() {
			if (this.curMicState) {
				this.RTCSDK.openMic(this.userInfo.userId);
			}
		},
		methods: {
			handleEventsPage(bool) {
				const handle = this.RTCSDK[bool ? 'on' : 'off'];
				handle("audioStatusChanged", this._audioStatusChanged);
				handle("micEnergyUpdate", this._micEnergyUpdate);
			},
			//开关麦克风
			toggleMicState() {
				this.curMicState = !this.curMicState;
				if (this.curMicState) {
					this.RTCSDK.openMic(this.userInfo.userId);
				} else {
					this.RTCSDK.closeMic(this.userInfo.userId);
				}
			},
			//切换听筒或扬声器
			toggleEarDevices() {
				this.speakerOut = !this.speakerOut;
				const isSuccess = this.RTCSDK.setSpeakerOut(this.speakerOut);
			},
			//挂断
			exit() {
				uni.navigateBack();
			},
			_audioStatusChanged({ userID, newStatus }) {
				if (userID == this.userInfo.userId) {
					//进入到这里可能是别人改变了自己的麦克风开关
					this.curMicState = newStatus === 3;
				}
			},
			_micEnergyUpdate({ userID, oldLevel, newLevel }) {
				console.log('_micEnergyUpdate', userID, newLevel)
				if (userID === this.userInfo.userId) {
					this.myEnergyValue = newLevel;
				} else {
					this.remoteUserId = userID;
					this.remoteEnergyValue = newLevel;
				}
			}
		}
	}
</script>

<style lang="scss">
	.content {
		flex: 1;

		.main {
			flex: 1;
			background-color: #1d232f;
			align-items: center;

			.audio-value {
				// width: 410rpx;
				padding: 26rpx 40rpx 10rpx;
				background-color: #0e1117;

				.item {
					margin-bottom: 30rpx;

					.text {
						font-size: 28rpx;
						color: $uni-bg-color;
					}

					.progress {
						width: 330rpx;
						height: 10rpx;
						background-color: #373F50;
						border-radius: 5rpx;
						margin-top: 10rpx;

						.value {
							height: 10rpx;
							background: #09DB00;
							border-radius: 5rpx;
						}
					}
				}
			}
		}

		.btn-box {
			padding: 20rpx 0 0;
			display: flex;
			flex-direction: row;
			justify-content: space-around;
			flex-wrap: wrap;
			background-color: #070604;

			.btn {
				width: 340rpx;
				margin-bottom: 20rpx;
			}
		}
	}
</style>