<template>
	<view>
		<view class="box">
			<view v-for="(row,index) in list" :key="index">
				<view class="title">
					<text class="title-text">{{row.section}}</text>
				</view>
				<view class="card">
					<button v-for="(item,index) in row.rows" :key="index" class='btn primary' :class="{disabled: loginState !== LoginState.loged}" @click="goto(item.type, item.name)" :style="{
							marginTop: index === 0 ? 0: '16rpx'
						}">
						<text class="btn-text">{{item.name}}</text>
					</button>
				</view>
			</view>
		</view>
	</view>
</template>

<script>
	import constantDesc from '@/util/constantDesc.js'
	import { readAppDir, showToast, createEnum } from '@/util'
	import md5 from '@/js_sdk/js-md5/src/md5.js'
	const loginEnum = createEnum(['logout', 'logging', 'loged']);
	const app = getApp();
	export default {
		data() {
			return {
				RTCSDK: null,
				loginState: loginEnum.logout,
				LoginState: loginEnum,
				initState: false,
				list: [{
					section: "基础功能",
					rows: [{
						name: "语音通话",
						type: "audioCall",
					}, {
						name: "视频通话",
						type: "videoCall",
					}, {
						name: "视频设置",
						type: "videoSetting",
					}, {
						name: "屏幕共享",
						type: "screenShare",
					}]
				}, {
					section: "高级功能",
					rows: [{
						name: "本地录制",
						type: "localRecord",
					}, {
						name: "云端录制",
						type: "cloudRecord",
					}, {
						name: "视频播放",
						type: "mediaShare",
					}, {
						name: "聊天",
						type: "chat",
					}]
				}]
			}
		},

		async onLoad() {
			this.RTCSDK = app.globalData.RTCSDK.getInstance();

			const path = await readAppDir();
			this.RTCSDK.init({
				sdkDatSavePath: path, //SDK内部使用文件位置
				noCall: false,
				noQueue: false,
				noMediaDatToSvr: null,
				timeOut: 120000,
				datEncType: "1",
			}, (sdkErr) => {
				if (sdkErr !== 0) {
					showToast(`初始化失败，错误码: ${sdkErr}, ${constantDesc[sdkErr]}`);
					return;
				}
				this.initState = true;
				this.handleEvents();
				this.startLogin();
			})
		},
		onNavigationBarButtonTap(e) {
			uni.navigateTo({ url: '/pages/setting/index' });
		},
		destroyed() {
			this.handleEvents(false);
		},
		onShow() {
			this.loginState = app.globalData.isLogin ? loginEnum.loged : loginEnum.logout;
			this.startLogin();
		},
		onHide() {
			clearTimeout(this.loginTimer);
		},
		methods: {
			handleEvents(bool = true) {
				const handle = this.RTCSDK[bool ? 'on' : 'off'];
				handle("loginSuccess", this._loginSuccess);
				handle("loginFail", this._loginFail);
				handle("lineOff", this._lineOff);
			},
			goto(type, name) {
				if (this.loginState !== loginEnum.loged) {
					showToast(`正在登录`);
					return;
				}
				uni.navigateTo({
					url: `/pages/join/index?type=${type}&title=${name}`
				})
			},
			startLogin() {
				if (this.initState && this.loginState === loginEnum.logout) {
					const { addr, appId, appSecret } = app.globalData.loginInfo;
					const { userId, nickname } = app.globalData.userInfo;
					this.RTCSDK.setServerAddr(addr);
					this.RTCSDK.login({
						appId,
						appSecret: md5(appSecret),
						userId,
						nickName: nickname,
					});
					clearTimeout(this.loginTimer);
					this.loginTimer = setTimeout(this.startLogin, 1e4);
				}
			},
			_loginSuccess({ userID }) {
				app.globalData.userInfo.userId = userID;
				this.loginState = loginEnum.loged;
				app.globalData.isLogin = true;
				clearTimeout(this.loginTimer);
				showToast(`登录成功`);
			},
			_loginFail({ sdkErr }) {
				this.loginState = loginEnum.logout;
				showToast(`登录失败,错误码:${sdkErr}, ${constantDesc[sdkErr]}`);
			},
			_lineOff({ sdkErr }) {
				app.globalData.isLogin = loginEnum.logout;
				this.loginState = loginEnum.logout;

				const currentPages = getCurrentPages();
				if (currentPages[currentPages.length - 1].route == 'pages/index/index') {
					// 如果在当前页
					this.startLogin();
				} else {
					//如果在其他页面
					uni.showModal({
						title: '您已掉线',
						content: `错误码:${sdkErr}, ${constantDesc[sdkErr]}`,
						showCancel: false,
						success(res) {
							if (res.confirm) {
								uni.reLaunch({ url: '/pages/index/index' })
							}
						}
					});
				}
			}
		}
	}
</script>

<style lang='scss'>
	.box {
		.title {
			margin-left: 34rpx;

			.title-text {
				font-size: 28rpx;
				height: 70rpx;
				line-height: 70rpx;
			}
		}

		.card {
			background-color: #fff;
			padding: 50rpx 72rpx;
		}
	}
</style>